<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CTRE</name>
    </assembly>
    <members>
        <member name="T:CTRE.Phoenix.CANifier">
            Object driver for CANifier, a multi purpose CAN device capable of
            - driving RGB common anode LED strip.
            - reading up to four general purpose PWM inputs.
            - generating up to four general purpose PWM outputs.
            - I2C/SPI transfers queued over CAN bus.
            - 11 3.3V GPIOs
            - Quadrature input
            - field-upgradeable for future Talon/Pigeon/CANifier control features.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetGeneralInput(CTRE.Phoenix.CANifier.GeneralPin)">
            Call GetLastError() to determine success.
            @return true if specified input is high, false o/w.  
        </member>
        <member name="M:CTRE.Phoenix.CANifier.EnablePWMOutput(System.Int32,System.Boolean)">
            Enables PWM Outputs
            Currently supports PWM 0, PWM 1, and PWM 2
            @param pwmChannel  Index of the PWM channel to enable.
            @param bEnable			"True" enables output on the pwm channel.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetQuadraturePosition">
            Gets the quadrature encoder's position
            @return Position of encoder 
        </member>
        <member name="M:CTRE.Phoenix.CANifier.SetQuadraturePosition(System.Int32,System.Int32)">
                     * Sets the quadrature encoder's position
                     * @param newPosition  Position to set
                     * @param timeoutMs  
                                    Timeout value in ms. If nonzero, function will wait for
                                    config success and report an error if it times out.
                                    If zero, no blocking or checking is performed.
                     * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetQuadratureVelocity">
            Gets the quadrature encoder's velocity
            @return Velocity of encoder
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ConfigVelocityMeasurementPeriod(CTRE.Phoenix.CANifierVelocityMeasPeriod,System.Int32)">
             Configures the period of each velocity sample.
             Every 1ms a position value is sampled, and the delta between that sample
             and the position sampled kPeriod ms ago is inserted into a filter.
             kPeriod is configured with this function.
            
             @param period
                        Desired period for the velocity measurement. @see
                        #VelocityMeasPeriod
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ConfigVelocityMeasurementWindow(System.Int32,System.Int32)">
             Sets the number of velocity samples used in the rolling average velocity
             measurement.
            
             @param windowSize
                        Number of samples in the rolling average of velocity
                        measurement. Valid values are 1,2,4,8,16,32. If another
                        value is specified, it will truncate to nearest support value.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ConfigSetCustomParam(System.Int32,System.Int32,System.Int32)">
             Sets the value of a custom parameter. This is for arbitrary use.
            
             Sometimes it is necessary to save calibration/duty cycle/output
             information in the device. Particularly if the
             device is part of a subsystem that can be replaced.
            
             @param newValue
                        Value for custom parameter.
             @param paramIndex
                        Index of custom parameter. [0-1]
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ConfigGetCustomParam(System.Int32,System.Int32)">
             Gets the value of a custom parameter. This is for arbitrary use.
            
             Sometimes it is necessary to save calibration/duty cycle/output
             information in the device. Particularly if the
             device is part of a subsystem that can be replaced.
            
             @param paramIndex
                        Index of custom parameter. [0-1]
             @param timoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Value of the custom param.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ConfigSetParameter(CTRE.Phoenix.LowLevel.ParamEnum,System.Single,System.Int32,System.Int32,System.Int32)">
            	 * Sets a parameter. Generally this is not used.
               * This can be utilized in
               * - Using new features without updating API installation.
               * - Errata workarounds to circumvent API implementation.
               * - Allows for rapid testing / unit testing of firmware.
            	 *
            	 * @param param
            	 *            Parameter enumeration.
            	 * @param value
            	 *            Value of parameter.
            	 * @param subValue
            	 *            Subvalue for parameter. Maximum value of 255.
            	 * @param ordinal
            	 *            Ordinal of parameter.
            	 * @param timeoutMs
            	 *            Timeout value in ms. If nonzero, function will wait for
               *            config success and report an error if it times out.
               *            If zero, no blocking or checking is performed.
            	 * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ConfigSetParameter(System.Int32,System.Single,System.Int32,System.Int32,System.Int32)">
                     * Sets a parameter. Generally this is not used.
                   * This can be utilized in
                   * - Using new features without updating API installation.
                   * - Errata workarounds to circumvent API implementation.
                   * - Allows for rapid testing / unit testing of firmware.
                     *
                     * @param param
                     *            Parameter enumeration.
                     * @param value
                     *            Value of parameter.
                     * @param subValue
                     *            Subvalue for parameter. Maximum value of 255.
                     * @param ordinal
                     *            Ordinal of parameter.
                     * @param timeoutMs
                     *            Timeout value in ms. If nonzero, function will wait for
                   *            config success and report an error if it times out.
                   *            If zero, no blocking or checking is performed.
                     * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ConfigGetParameter(CTRE.Phoenix.LowLevel.ParamEnum,System.Int32,System.Int32)">
                     * Gets a parameter. Generally this is not used.
                   * This can be utilized in
                   * - Using new features without updating API installation.
                   * - Errata workarounds to circumvent API implementation.
                   * - Allows for rapid testing / unit testing of firmware.
                     *
                     * @param param
                     *            Parameter enumeration.
                     * @param ordinal
                     *            Ordinal of parameter.
                     * @param timeoutMs
                     *            Timeout value in ms. If nonzero, function will wait for
                   *            config success and report an error if it times out.
                   *            If zero, no blocking or checking is performed.
                     * @return Value of parameter.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.SetStatusFramePeriod(CTRE.Phoenix.CANifierStatusFrame,System.Int32,System.Int32)">
            	 * Sets the period of the given status frame.
            	 *
            	 * @param statusFrame
            	 *            Frame whose period is to be changed.
            	 * @param periodMs
            	 *            Period in ms for the given frame.
            	 * @param timeoutMs
            	 *            Timeout value in ms. If nonzero, function will wait for
               *            config success and report an error if it times out.
               *            If zero, no blocking or checking is performed.
            	 * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.SetStatusFramePeriod(System.Int32,System.Int32,System.Int32)">
                     * Sets the period of the given status frame.
                     *
                     * @param statusFrame
                     *            Frame whose period is to be changed.
                     * @param periodMs
                     *            Period in ms for the given frame.
                     * @param timeoutMs
                     *            Timeout value in ms. If nonzero, function will wait for
                   *            config success and report an error if it times out.
                   *            If zero, no blocking or checking is performed.
                     * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetStatusFramePeriod(CTRE.Phoenix.CANifierStatusFrame,System.Int32)">
                     * Gets the period of the given status frame.
                     *
                     * @param frame
                     *            Frame to get the period of.
                     * @param timeoutMs
                     *            Timeout value in ms. If nonzero, function will wait for
                   *            config success and report an error if it times out.
                   *            If zero, no blocking or checking is performed.
                     * @return Period of the given status frame.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.SetControlFramePeriod(CTRE.Phoenix.CANifierControlFrame,System.Int32)">
             Sets the period of the given control frame.
            
             @param frame
                        Frame whose period is to be changed.
             @param periodMs
                        Period in ms for the given frame.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.SetControlFramePeriod(System.Int32,System.Int32)">
             Sets the period of the given control frame.
            
             @param frame
                        Frame whose period is to be changed.
             @param periodMs
                        Period in ms for the given frame.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetFirmwareVersion">
             Gets the firmware version of the device.
            
             @return Firmware version of device.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.HasResetOccurred">
             Returns true if the device has reset since last call.
            
             @return Has a Device Reset Occurred?
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetFaults(CTRE.Phoenix.CANifierFaults)">
             Gets the CANifier fault status
            
             @param toFill
                        Container for fault statuses.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetStickyFaults(CTRE.Phoenix.CANifierStickyFaults)">
             Gets the CANifier sticky fault status
            
             @param toFill
                        Container for sticky fault statuses.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.ClearStickyFaults(System.Int32)">
             Clears the Sticky Faults
            
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetBusVoltage">
             Gets the bus voltage seen by the device.
            
             @return The bus voltage value (in volts).
        </member>
        <member name="M:CTRE.Phoenix.CANifier.GetDeviceID">
            @return The Device Number
        </member>
        <member name="T:CTRE.Phoenix.CANifierControlFrame">
            Enumerated type for status frame types. 
        </member>
        <member name="T:CTRE.Phoenix.CANifierStatusFrame">
            Enumerated type for status frame types. 
        </member>
        <member name="M:CTRE.Phoenix.ErrorStrings.GetErrorDescription(CTRE.ErrorCode,System.String@,System.String@)">
            @param code Error Code to get description for.
            @param shortDescripToFill [out] string ref to fill with short description.
            @param longDescripToFill [out] string ref to fill with long description.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.GetFirmStatus">
            Polls for firm frame.
            @return error code.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.GetStatus5">
            Polls status5 frame, which is only transmitted on motor controller boot.
            @return error code.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.GetFirmwareVersion">
            return -1 if not available, return 0xXXYY format if available 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.HasResetOccured">
            @return true iff a reset has occured since last call.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.CheckFirmVers(System.Int32,System.Int32,CTRE.ErrorCode)">
            Helpful routine for child classes to report too-old firm
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.EnableFirmStatusFrame(System.Boolean)">
            child class has to provide a way to enable/disable firm status 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.ConfigSetParameterRaw(CTRE.Phoenix.LowLevel.ParamEnum,System.Int32,System.Byte,System.Int32,System.Int32)">
            Send a one shot frame to set an arbitrary signal.
            Most signals are in the control frame so avoid using this API unless you have
            to.
            Use this api for...
            -A motor controller profile signal eProfileParam_XXXs.  These are backed up
            in flash.  If you are gain-scheduling then call this periodically.
            -Default brake and limit switch signals... eOnBoot_XXXs.  Avoid doing this,
            use the override signals in the control frame.
            Talon will automatically send a PARAM_RESPONSE after the set, so
            GetParamResponse will catch the latest value after a couple ms.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.ConfigGetParameter(CTRE.Phoenix.LowLevel.ParamEnum,System.Int32,System.Int32@,System.Byte,System.Int32,System.Int32)">
            Blocking read of a given parameter.  Virtual declared so that child classes can override with float return.
            Child classes will understand how to decode raw integral type into human readable floating point values.
            @param paramEnum Enumerated parameter to read.
            @param paramEnum Enumerated parameter to read.
            
            private get config with all params, status frame requires this 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.RequestParam(CTRE.Phoenix.LowLevel.ParamEnum,System.Int32,System.Byte,System.Int32)">
                     * Asks TALON to immedietely respond with signal value.  This API is only used
                     * for signals that are not sent periodically.
                     * This can be useful for reading params that rarely change like Limit Switch
                     * settings and PIDF values.
                      * @param param to request.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.PollForParamResponse(CTRE.Phoenix.LowLevel.ParamEnum,System.Int32@)">
            Checks cached CAN frames and updating solicited signals.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.SetStatusFramePeriod(System.Int32,System.Int32,System.Int32)">
            Change the periodMs of a TALON's status frame.  See kStatusFrame_* enums for
            what's available.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.Device_LowLevel.SetDescription(System.String)">
            child class should call this once to set the description 
        </member>
        <member name="T:CTRE.Phoenix.Containers.ByteRingBuffer">
            <summary>
            General ring buffer for bytes.
            </summary>
        </member>
        <member name="T:CTRE.Phoenix.Containers.CharRingBuffer">
            <summary>
            General ring buffer for bytes.
            </summary>
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.GetButton(System.UInt32)">
            @param buttonIdx (One-indexed button).  '1' for button1 (first button).
            @return true if specified button is true.
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.GetButtons(System.Boolean[])">
            @param buttonArray. Array with current state of buttons less than buttanArray.length
                                Array[0] always false.
                                Array index matches button index from [1, 12]. Return false when index exceeds button count
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.GetAxis(System.UInt32)">
            @param axisIdx (Zero-indexed axis).  '0' is typically the first X axis.
            @return floating point value within [-1,1].
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.GetAllValues(CTRE.Phoenix.Controller.GameControllerValues@)">
            Retrieves a copy of the internal gamepadvalues structure used in decoding signals.
            This can be used to retrieve signals not readily available through the Gamepad API (such as vendor specific signals or VID/PID).
            To use this function, first create a gamepadValues instance and pass by reference.
            <pre>{@code
                 GamepadValues values = new GamepadValues(); // Create only once and use functiont to update it periodically.
                 ...
                 gamepad.GetAllValues(gamepadValues); // Get latest values
            }</pre>
            @param gamepadValues reference to update with latest values.
            @return object reference to gamepadValues for function chaining.
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.GetConnectionStatus">
            Get the connection status of the Usb device.
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.SetLeftRumble(System.Byte)">
                     * Set the Right Rumble strength.
            		 * @param strength 0 for off, [1,255] 
            		 * 			for on with increasing strength.
            		 * @return int error code, 0 for success.
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.SetRightRumble(System.Byte)">
                     * Set the Right Rumble strength.
            		 * @param strength 0 for off, [1,255] 
            		 * 			for on with increasing strength.
            		 * @return int error code, 0 for success.
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.SetRumble(System.Byte,System.Byte)">
                     * Set the Left/Right Rumble strength at the same time.
            		 * @param leftStrength 0 for off, [1,255] 
            		 * 			for on with increasing strength.
            		 * @param rightStrength 0 for off, [1,255] 
            		 * 			for on with increasing strength.
            		 * @return int error code, 0 for success.
        </member>
        <member name="M:CTRE.Phoenix.Controller.GameController.SetLEDCode(System.Byte)">
                     * Set the Xbox LED code.
            		 * @param Valid values are [6,9] for the four LEDs.
            		 * @return int error code, 0 for success.
        </member>
        <member name="T:CTRE.Phoenix.Controller.IGameControllerValuesProvider">
                 * Interface for anything that provides gamepad/joystick values (could be from a host pc or from USB attached gamepad). 
                 * @return  Negative If values could not be retrieved due to connection issue.  toFill is cleared.
                            Zero if values are stale (no new data). toFill is left untouched.
                 *          Positive if values are updated. toFill is filled in.
        </member>
        <member name="M:CTRE.Phoenix.Controller.LogitechGamepad.Process">
            <summary>
            Called once per app loop.
            </summary>
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.Process">
            Called Once per app loop
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.LogToXboxBtnIdx(System.UInt32)">
            Maps Xbox outputs 
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.GetButtonEvent(System.UInt32)">
            Grabs a single button press
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.IsButtonLow(System.UInt32)">
            Checks to see if button is being held/pressed down
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.ModeButtonEnabled">
            Check to see if Mode button has been enabled
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.VibrateButtonEnabled">
            Check to see if Vibration button has been enabled
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.LowVoltageDetected">
            Check to see if controller is low battery
        </member>
        <member name="M:CTRE.Phoenix.Controller.Xbox360Gamepad.GetStick(System.UInt32)">
            Return Axis, Y axis needs to be flipped with -1
        </member>
        <member name="T:CTRE.Phoenix.Drive.Styles.AdvancedStyle">
            Drive styles made available by adding sensors 
        </member>
        <member name="T:CTRE.Phoenix.Drive.Styles.BasicStyle">
            Drive styles that are available when there are no sensors.
        </member>
        <member name="F:CTRE.Phoenix.FRC.DriverStation._timeout">
            Cache for reading out bytes in serial driver. 
        </member>
        <member name="M:CTRE.Phoenix.FRC.DriverStation.IsConnected">
            IRobotState Provider 
        </member>
        <member name="M:CTRE.Phoenix.FRC.DriverStation.Get(CTRE.Phoenix.Controller.GameControllerValues@,System.UInt32)">
            IGameControllerProvider
        </member>
        <member name="M:CTRE.Phoenix.FRC.DriverStation.OnStart">
            ILoopable
        </member>
        <member name="F:CTRE.Phoenix.RobotApplication.Instance">
            Public instance of the application, allows debuggers to throw this into the watch.
        </member>
        <member name="M:CTRE.Phoenix.RobotApplication.RunForever">
            Called by the framework to run the robot.
        </member>
        <member name="M:CTRE.Phoenix.RobotApplication.RobotInit">
            @return true if user has initialized robot, false if robot is not initialized.
            Framework will keep calling RobotInit() until it returns true, allowing developers to 
            spend as much time as needed to properly setup sub systems.  
            Implementation may also block indefinitely (however periodic sleeping is recommended).
        </member>
        <member name="P:CTRE.Phoenix.FRC.IterativeApplication.SelectedRobotStateProvider">
            Allow caller to select other robot state providers, like WiFi, DriverStation, etc...
        </member>
        <member name="M:CTRE.Gadgeteer.Module.DisplayModule.#ctor(CTRE.Gadgeteer.IPortSPI,CTRE.Gadgeteer.Module.DisplayModule.OrientationType)">
            ctor 
        </member>
        <member name="M:CTRE.Gadgeteer.Module.DisplayModule.Clear">
            <summary>
            Clear the screen.
            </summary>
        </member>
        <member name="P:CTRE.Gadgeteer.Module.DisplayModule.UseManagedBitmapConverter">
            set to true to use C# implementation of pixel raster routine 
        </member>
        <member name="F:CTRE.Gadgeteer.Module.DisplayModule.Sprite._newPos">
            <summary>
            Register the new position to apply.  This way we could erase the spirte at the old position if need be.
            </summary>
        </member>
        <member name="M:CTRE.Gadgeteer.Module.DisplayModule.Sprite.AllocBmp">
            <summary>
            Only create new bitmaps for new width/height pairs.  This saves memory as text labels tend to be the same dimensions when tabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CTRE.Phoenix.Drive.Mecanum.#ctor(CTRE.Phoenix.MotorControl.IMotorController,CTRE.Phoenix.MotorControl.IMotorController,CTRE.Phoenix.MotorControl.IMotorController,CTRE.Phoenix.MotorControl.IMotorController)">
            Contstructor that takes 4 SimpleMotorcontrollers 
        </member>
        <member name="M:CTRE.Phoenix.Drive.Mecanum.#ctor(CTRE.Phoenix.Mechanical.Gearbox,CTRE.Phoenix.Mechanical.Gearbox,CTRE.Phoenix.Mechanical.Gearbox,CTRE.Phoenix.Mechanical.Gearbox)">
            Contstructor that takes 4 Gearboxes 
        </member>
        <member name="M:CTRE.Phoenix.Drive.Mecanum.Set(CTRE.Phoenix.Drive.Styles.BasicStyle,System.Single,System.Single,System.Single)">
            Uses forward, strafe, and turn (Mecanum drive)
            
            @param   forward     Y direction of robot
            @param   strafe      X direction of robot
            @param   turn        twist of the robot (arch)
        </member>
        <member name="M:CTRE.Phoenix.Drive.Mecanum.Set(CTRE.Phoenix.Drive.Styles.BasicStyle,System.Single,System.Single)">
            Uses forward, strafe, and turn (Mecanum drive)
            
            @param   forward     Y direction of robot
            @param   strafe      X direction of robot
        </member>
        <member name="M:CTRE.Phoenix.Drive.Tank.#ctor(CTRE.Phoenix.Mechanical.Gearbox,CTRE.Phoenix.Mechanical.Gearbox,System.Boolean,System.Boolean)">
            Tank Drive constructor that takes a left gearbox, right gearbox, and side inverted 
        </member>
        <member name="P:CTRE.Phoenix.Drive.SensoredTank.DistanceBetweenWheels">
            Encoder heading properties 
        </member>
        <member name="M:CTRE.Gadgeteer.Module.WiFiESP12F.enableDebugPrints(System.Boolean)">
            <summary>
            Sets whether all UART traffic to/from the ESP12F is printed in the Debug output.
            </summary>
            <param name="enable">True enables printing. Default value is "true".</param>
        </member>
        <member name="M:CTRE.Gadgeteer.Module.WiFiESP12F.getStationIP(System.Int32)">
             Get the Station IP Address
            
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return String of the IP Address
                        If in Station Mode, we check the first 12 characters to match 
                        "+CIFSR:STAIP". 
        </member>
        <member name="M:CTRE.Gadgeteer.Module.WiFiESP12F.setAP(System.String,System.String,System.Int32,CTRE.Gadgeteer.Module.WiFiESP12F.SecurityType)">
            <summary>
            Configures the Access Point settings for the ESP12F.
            </summary>
            <param name="_SSID"></param>
            <param name="password">Must be [8,63] ASCII characters.</param>
            <param name="channel"></param>
            <param name="encryption"></param>
            <returns></returns>
        </member>
        <member name="M:CTRE.Phoenix.HsvToRgb.Convert(System.Double,System.Double,System.Double,System.Single@,System.Single@,System.Single@)">
            Convert hue/saturation/and value into RGB values
            
            @param   hDegrees    Hue in degrees
            @param   S           Saturation with range of 0 to 1
            @param   V           Value with range of 0 to 1
            @param   r           Calculated Red value of RGB
            @param   g           Calculated Green value of RGB
            @param   b           Calculated Blue value of RGB
        </member>
        <member name="T:CTRE.Phoenix.IGadgeteerUartClient">
            <summary>
            Interface for CAN Devices that allow for connecting intelligent UART Gadgeteer Devices.
            An example of this is usecase of plugging a ribbon cable between a Pigeon-IMU and Talon SRX (on CAN bus).
            Talon SRX would then implement this interface to provide status information on it's connection to the UART device.
            </summary>
        </member>
        <member name="T:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel">
            A mot controller with buffer low level. 
        </member>
        <member name="T:CTRE.Phoenix.LowLevel.MotController_LowLevel">
             @brief CAN TALON SRX driver.
            
             The TALON SRX is designed to instrument all runtime signals periodically.
             The default periods are chosen to support 16 TALONs with 10ms update rate
             for control (throttle or setpoint).  However these can be overridden with
             SetStatusFramePeriod. @see SetStatusFrameRate
             The getters for these unsolicited signals are auto generated at the bottom
             of this module.
            
             Likewise most control signals are sent periodically using the fire-and-forget
             CAN API.  The setters for these unsolicited signals are auto generated at the
             bottom of this module.
            
             Signals that are not available in an unsolicited fashion are the Close Loop
             gains.  For teams that have a single profile for their TALON close loop they
             can use either the webpage to configure their TALONs once or set the PIDF,
             Izone, CloseLoopRampRate, etc... once in the robot application.  These
             parameters are saved to flash so once they are loaded in the TALON, they
             will persist through power cycles and mode changes.
            
             For teams that have one or two profiles to switch between, they can use the
             same strategy since there are two slots to choose from and the
             ProfileSlotSelect is periodically sent in the 10 ms control frame.
            
             For teams that require changing gains frequently, they can use the soliciting
             API to get and set those parameters.  Most likely they will only need to set
             them in a periodic fashion as a function of what motion the application is
             attempting.  If this API is used, be mindful of the CAN utilization reported
             in the driver station.
            
             If calling application has used the config routines to configure the
             selected feedback sensor, then all positions are measured in floating point
             precision rotations.  All sensor velocities are specified in floating point
             precision RPM.
             @see ConfigPotentiometerTurns
             @see ConfigEncoderCodesPerRev
             HOWEVER, if calling application has not called the config routine for
             selected feedback sensor, then all getters/setters for position/velocity use
             the native engineering units of the Talon SRX firm (just like in 2015).
             Signals explained below.
            
             Encoder position is measured in encoder edges.  Every edge is counted
             (similar to roboRIO 4X mode).  Analog position is 10 bits, meaning 1024
             ticks per rotation (0V => 3.3V).  Use SetFeedbackDeviceSelect to select
             which sensor type you need.  Once you do that you can use GetSensorPosition()
             and GetSensorVelocity().  These signals are updated on CANBus every 20ms (by
             default).  If a relative sensor is selected, you can zero (or change the
             current value) using SetSensorPosition.
            
             Analog Input and quadrature position (and velocity) are also explicitly
             reported in GetEncPosition, GetEncVel, GetAnalogInWithOv, GetAnalogInVel.
             These signals are available all the time, regardless of what sensor is
             selected at a rate of 100ms.  This allows easy instrumentation for "in the
             pits" checking of all sensors regardless of modeselect.  The 100ms rate is
             overridable for teams who want to acquire sensor data for processing, not
             just instrumentation.  Or just select the sensor using
             SetFeedbackDeviceSelect to get it at 20ms.
            
             Velocity is in position ticks / 100ms.
            
             All output units are in respect to duty cycle (throttle) which is -1023(full
             reverse) to +1023 (full forward).  This includes demand (which specifies
             duty cycle when in duty cycle mode) and rampRamp, which is in throttle units
             per 10ms (if nonzero).
            
             Pos and velocity close loops are calc'd as
               err = target - posOrVel.
               iErr += err;
               if(   (IZone!=0)  and  abs(err) > IZone)
                   ClearIaccum()
               output = P X err + I X iErr + D X dErr + F X target
               dErr = err - lastErr
             P, I, and D gains are always positive. F can be negative.
             Motor direction can be reversed using SetRevMotDuringCloseLoopEn if
             sensor and motor are out of phase. Similarly feedback sensor can also be
             reversed (multiplied by -1) if you prefer the sensor to be inverted.
            
             P gain is specified in throttle per error tick.  For example, a value of 102
             is ~9.9% (which is 102/1023) throttle per 1 ADC unit(10bit) or 1 quadrature
             encoder edge depending on selected sensor.
            
             I gain is specified in throttle per integrated error. For example, a value
             of 10 equates to ~0.99% (which is 10/1023) for each accumulated ADC unit
             (10 bit) or 1 quadrature encoder edge depending on selected sensor.
             Close loop and integral accumulator runs every 1ms.
            
             D gain is specified in throttle per derivative error. For example a value of
             102 equates to ~9.9% (which is 102/1023) per change of 1 unit (ADC or
             encoder) per ms.
            
             I Zone is specified in the same units as sensor position (ADC units or
             quadrature edges).  If pos/vel error is outside of this value, the
             integrated error will auto-clear...
               if(   (IZone!=0)  and  abs(err) > IZone)
                   ClearIaccum()
             ...this is very useful in preventing integral windup and is highly
             recommended if using full PID to keep stability low.
            
             CloseLoopRampRate is in throttle units per 1ms.  Set to zero to disable
             ramping.  Works the same as RampThrottle but only is in effect when a close
             loop mode and profile slot is selected.
            
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotController_LowLevel.#ctor(System.Int32,System.Boolean)">
            Constructor for the CAN Enabled CTRE motor controller.
            @param deviceNumber The CAN ID of the CTRE motor controller.
            @param externalEnable Has no effect (originally was used to 
                                 allow individual enable signal from 
                                 external source). Defaults to false.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotController_LowLevel.Set(CTRE.Phoenix.MotorControl.ControlMode,System.Double,System.Double,System.Int32)">
             @param mode
             @param demand0	If open loop, [-1,+1]
            					If closed loop, units or units/100ms.
             @param demand1	if open-loop, [-1,+1]
             @param demand1Type 0 for off, 1 for AuxiliaryPID, 2 for feedforward
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotController_LowLevel.GetPinStateQuadB(System.Int32@)">
            @return IO level of QUADB pin.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotController_LowLevel.GetPinStateQuadIdx(System.Int32@)">
            @return IO level of QUAD Index pin.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotController_LowLevel.IsFwdLimitSwitchClosed(System.Int32@)">
            @return '1' iff forward limit switch is closed, 0 iff switch is open.
            This function works regardless if limit switch feature is enabled.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotController_LowLevel.IsRevLimitSwitchClosed(System.Int32@)">
            @return '1' iff reverse limit switch is closed, 0 iff switch is open.
            This function works regardless if limit switch feature is enabled.
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.FLOAT_TO_FXP_10_22">
            The float to fxp 10 22. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.FXP_TO_FLOAT_10_22">
            The fxp to float 10 22. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.FLOAT_TO_FXP_0_8">
            The float to fxp 0 8. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.FXP_TO_FLOAT_0_8">
            The fxp to float 0 8. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProfileFlag_ActTraj_IsValid">
            The motion profile flag act traj is valid. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProfileFlag_HasUnderrun">
            The motion profile flag has underrun. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProfileFlag_IsUnderrun">
            The motion profile flag is underrun. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProfileFlag_ActTraj_IsLast">
            The motion profile flag act traj is last. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProfileFlag_ActTraj_VelOnly">
            The motion profile flag act traj velocity only. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProf_Disabled">
            Motor output is neutral, Motion Profile Executer is not running. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProf_Enable">
            Motor output is updated from Motion Profile Executer, MPE will process the buffered points. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProf_Hold">
            Motor output is updated from Motion Profile Executer, MPE will stay processing current
            trajectory point.
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kDefaultControl6PeriodMs">
            The default control 6 period milliseconds. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.kMotionProfileTopBufferCapacity">
            To keep buffers from getting out of control, place a cap on the top level buffer.  Calling
            application can stream addition points as they are fed to Talon. Approx memory footprint is
            this capacity X 8 bytes.
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel._cache">
            The cache. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel._len">
            The length. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel._motProfTopBuffer">
            Buffer for mot prof top data. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel._motProfFlowControl">
            Flow control for streaming trajectories. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel._mutMotProf">
            The mut mot prof. 
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel._control6PeriodMs">
            Frame Period of the motion profile control6 frame. 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.#ctor(System.Int32,System.Boolean)">
             Constructor for the CANTalon device.
            
             @param   baseArbId       The CAN ID of the Talon SRX.
             @param   externalEnable  (Optional) pass true to prevent sending enable frames. This can be
                                      useful when having one device enable the Talon, and another to
                                      control it.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.GetControl6">
             Gets control 6.
            
             @return  the tx task that transmits Control6 (motion profile control). If it's not scheduled,
                      then schedule it.  This is part of firing the MotionProf framing only when needed to
                      save bandwidth.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.ChangeMotionControlFramePeriod(System.UInt32)">
             Calling application can opt to speed up the handshaking between the robot API and the Talon
             to increase the download rate of the Talon's Motion Profile. Ideally the period should be no
             more than half the period of a trajectory point.
            
             @param   periodMs    The period in milliseconds.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.ClearMotionProfileTrajectories">
            Clear the buffered motion profile in both Talon RAM (bottom), and in the API (top). 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.GetMotionProfileTopLevelBufferCount">
             Retrieve just the buffer count for the api-level (top) buffer. This routine performs no CAN
             or data structure lookups, so its fast and ideal if caller needs to quickly poll the progress
             of trajectory points being emptied into Talon's RAM. Otherwise just use
             GetMotionProfileStatus.
            
             @return  number of trajectory points in the top buffer.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.IsMotionProfileTopLevelBufferFull">
             Retrieve just the buffer full for the api-level (top) buffer. This routine performs no CAN or
             data structure lookups, so its fast and ideal if caller needs to quickly poll. Otherwise just
             use GetMotionProfileStatus.
            
             @return  number of trajectory points in the top buffer.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.PushMotionProfileTrajectory(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
             Push another trajectory point into the top level buffer (which is emptied into the Talon's
             bottom buffer as room allows).
            
             @param   targPos             servo position in native Talon units (sensor units).
             @param   targVel             velocity to feed-forward in native Talon units (sensor units per
                                          100ms).
             @param   profileSlotSelect   which slot to pull PIDF gains from.  Currently supports 0 or 1.
             @param   timeDurMs           time in milliseconds of how long to apply this point.
             @param   velOnly             set to nonzero to signal Talon that only the feed-foward velocity
                                          should be used, i.e. do not perform PID on position. This is
                                          equivalent to setting PID gains to zero, but much more efficient
                                          and synchronized to MP.
             @param   isLastPoint         set to nonzero to signal Talon to keep processing this trajectory
                                          point, instead of jumping to the next one when timeDurMs expires.
                                          Otherwise MP executer will eventually see an empty buffer after
                                          the last point expires, causing it to assert the IsUnderRun flag.
                                          However this may be desired if calling application never wants to
                                          terminate the MP.
             @param   zeroPos             set to nonzero to signal Talon to "zero" the selected position
                                          sensor before executing this trajectory point. Typically the
                                          first point should have this set only thus allowing the remainder
                                          of the MP positions to be relative to zero.
            
             @return  CTR_OKAY if trajectory point push ok. CTR_BufferFull if buffer is full due to
                      kMotionProfileTopBufferCapacity.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.MotionProf_IncrementSync(System.Int32)">
             Increment our flow control to manage streaming to the Talon.
                  f(x) = { 1,   x = 15,
                           x+1,  x &lt; 15
                         }
            
             @param   idx Zero-based index of the.
            
             @return  An int.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.ReactToMotionProfileCall">
            Caller is either pushing a new motion profile point, or is calling the Process buffer
            routine.  In either case check our flow control to see if we need to start sending control6.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.ProcessMotionProfileBuffer">
            This must be called periodically to funnel the trajectory points from the API's top level
            buffer to the Talon's bottom level buffer.  Recommendation is to call this twice as fast as
            the executation rate of the motion profile. So if MP is running with 20ms trajectory points,
            try calling this routine every 10ms.  All motion profile functions are thread-safe through
            the use of a mutex, so there is no harm in having the caller utilize threading.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.GetMotionProfileStatus(System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             Retrieve all status information. Since this all comes from one CAN frame, its ideal to have
             one routine to retrieve the frame once and decode everything.
            
             @param [out] flags               bitfield for status bools. Starting with least significant
                                              bit: IsValid, HasUnderrun, IsUnderrun, IsLast, VelOnly.
                                              
                                              IsValid  set when MP executer is processing a trajectory
                                              point, and that point's status is instrumented with IsLast,
                                              VelOnly, targPos, targVel.  However if MP executor is not
                                              processing a trajectory point, then this flag is false, and
                                              the instrumented signals will be zero. HasUnderrun  is set
                                              anytime the MP executer is ready to pop another trajectory
                                              point from the Talon's RAM, but the buffer is empty.  It can
                                              only be cleared by using
                                              SetParam(eMotionProfileHasUnderrunErr,0);
                                              IsUnderrun  is set when the MP executer is ready for another
                                              point, but the buffer is empty, and cleared when the MP
                                              executer does not need another point. HasUnderrun shadows
                                              this registor when this register gets set, however
                                              HasUnderrun stays asserted until application has process it,
                                              and IsUnderrun auto-clears when the condition is resolved.
                                              IsLast  is set/cleared based on the MP executer's current
                                              trajectory point's IsLast value.  This assumes IsLast was set
                                              when PushMotionProfileTrajectory was used to insert the
                                              currently processed trajectory point. VelOnly  is set/cleared
                                              based on the MP executer's current trajectory point's VelOnly
                                              value.
             @param [out] profileSlotSelect   The currently processed trajectory point's selected slot.
                                              This can differ in the currently selected slot used for
                                              Position and Velocity servo modes.
             @param [out] targPos             The currently processed trajectory point's position in native
                                              units.  This param is zero if IsValid is zero.
             @param [out] targVel             The currently processed trajectory point's velocity in native
                                              units.  This param is zero if IsValid is zero.
             @param [out] topBufferRem        The remaining number of points in the top level buffer.
             @param [out] topBufferCnt        The number of points in the top level buffer to be sent to
                                              Talon.
             @param [out] btmBufferCnt        The number of points in the bottom level buffer inside Talon.
             @param [out] outputEnable        The output enable.
            
             @return  CTR error code.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.ClearMotionProfileHasUnderrun(System.Int32)">
             Clear the hasUnderrun flag in Talon's Motion Profile Executer when MPE is ready for another
             point, but the low level buffer is empty.
             
             Once the Motion Profile Executer sets the hasUnderrun flag, it stays set until Robot
             Application clears it with this routine, which ensures Robot Application gets a chance to
             instrument or react.  Caller could also check the isUnderrun flag which automatically clears
             when fault condition is removed.
            
             @param   timeoutMs   (Optional) The timeout in milliseconds.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.GetMotionProfileStatus(CTRE.Phoenix.Motion.MotionProfileStatus)">
             Gets motion profile status.
            
             @param   statusToFill    The status to fill.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MotControllerWithBuffer_LowLevel.PushMotionProfileTrajectory(CTRE.Phoenix.Motion.TrajectoryPoint)">
             Pushes a motion profile trajectory.
            
             @param   trajPt  The traj point.
            
             @return  An ErrorCode.
        </member>
        <member name="T:CTRE.Phoenix.LowLevel.ParamEnum">
            Signal enumeration for generic signal access.
            Although every signal is enumerated, only use this for traffic that must
            be solicited.
            Use the auto generated getters/setters at bottom of this header as much as
            possible.
        </member>
        <member name="F:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.EXPECTED_RESPONSE_TIMEOUT_MS">
            overall threshold for when frame data is too old 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.AddYaw(System.Single,System.Int32)">
            Atomically add to the Yaw register.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.ConfigTemperatureCompensationEnable(System.Boolean,System.Int32)">
            Enable/Disable Temp compensation.  Pigeon defaults with this on at boot.
            @param tempCompEnable
            @return nonzero for error, zero for success.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.AddFusedHeading(System.Single,System.Int32)">
            Atomically add to the Fused Heading register.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.SetCompassDeclination(System.Single,System.Int32)">
            Set the declination for compass.
            Declination is the difference between Earth Magnetic north, and the geographic "True North".
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.SetCompassAngle(System.Single,System.Int32)">
            Sets the compass angle.
            Although compass is absolute [0,360) degrees, the continuous compass
            register holds the wrap-arounds.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.GetGeneralStatus(CTRE.Phoenix.Sensors.GeneralStatus)">
            Get the status of the current (or previousley complete) calibration.
            @param statusToFill
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.GetTwoParam16(System.Int32,System.Int16[])">
            Decode two 16bit parameters.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.GetAbsoluteCompassHeading(System.Single@)">
            @return compass heading [0,360) degrees.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.GetCompassHeading(System.Single@)">
            @return continuous compass heading [-23040, 23040) degrees.
            Use SetCompassHeading to modify the wrap-around portion.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.GetCompassFieldStrength(System.Single@)">
            @return field strength in Microteslas (uT).
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.GetUpTime(System.Int32@)">
            <summary>
            How long has Pigeon been running
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.GetFusedHeading(CTRE.Phoenix.Sensors.FusionStatus,System.Single@)">
             @param status 	object reference to fill with fusion status flags.  
            					Caller may omit this parameter if flags are not needed.
             @return fused heading in degrees.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.ConfigSetWrapper(CTRE.Phoenix.LowLevel.ParamEnum,CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.TareType,System.Single,System.Int32)">
            private wrapper to avoid specifying ordinal 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.ConfigSetWrapper(CTRE.Phoenix.LowLevel.ParamEnum,System.Single,System.Int32)">
            private wrapper to avoid specifying ordinal and subvalue 
        </member>
        <member name="T:CTRE.Phoenix.LowLevel.PigeonIMU_LowLevel.TareType">
            sub command for the various Set param enums 
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.MsgEntry.Compile">
            return the full message 
        </member>
        <member name="T:CTRE.Phoenix.LowLevel.TrajectoryBuffer">
            Top level Buffer for motion profile trajectory buffering.
            Basically this buffers up the eight byte CAN frame payloads that are
            handshaked into the Talon RAM.
            TODO: Should this be moved into a separate header, and if so where
            logically should it reside?
            TODO: Add compression so that multiple CAN frames can be compressed into
            one exchange.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.TrajectoryBuffer.Push(System.UInt64)">
            push caller's uncompressed simple trajectory point.
        </member>
        <member name="M:CTRE.Phoenix.LowLevel.TrajectoryBuffer.Front">
            Get the next trajectory point CAN frame to send.
            Underlying layer may compress the next few points together
            into one control_6 frame.
        </member>
        <member name="T:CTRE.Phoenix.Mechanical.Gearbox">
            This class is basically just a collection of simple motor controllers 
        </member>
        <member name="M:CTRE.Phoenix.Mechanical.Linkage.Setup">
            Set all follower SimpleMotorControl to follow the Master SimpleMotorcontroller 
        </member>
        <member name="M:CTRE.Phoenix.Mechanical.Linkage.Set(CTRE.Phoenix.MotorControl.ControlMode,System.Single,CTRE.Phoenix.MotorControl.DemandType,System.Single)">
            Sets the motor output and takes inversion into account 
        </member>
        <member name="T:CTRE.Phoenix.Mechanical.CurrentLimitedSensorGearbox">
            Represents a mechanical system whereby a number of motor controllers is connected together via a gearbox.
            One of the motor controllers must be a Talon SRX, and it must use the feedback connector.
        </member>
        <member name="T:CTRE.Phoenix.Mechanical.SensoredGearbox">
            Represents a mechanical system whereby a number of motor controllers is connected together via a gearbox.
            One of the motor controllers must be a Talon SRX, and it must use the feedback connector.
        </member>
        <member name="T:CTRE.Phoenix.Mechanical.RemoteSensoredGearbox">
            Represents a mechanical system whereby a number of motor controllers is connected together via a gearbox.
            One of the motor controllers must be a Talon SRX, and it must use the feedback connector.
        </member>
        <member name="M:CTRE.Phoenix.Mechanical.VersaPlanetaryWithMagEnc.#ctor(System.Single,CTRE.Phoenix.MotorControl.CAN.TalonSRX)">
            @param gearRatio ratio between the motor output and the final geared output. 
            Typically a reduction, example: ToDO
            @param integratedEncoderRatio ratio between the motor output and the sensor output.
            Typically a reduction, example: ToDO
        </member>
        <member name="T:CTRE.Phoenix.IProcessable">
            Any class that requires a periodic call to Process() to perform it's expected duties.
            
            An important part of developing a real-time embedded system is learning how to split up 
            tasks into nonblocking routines that can run concurrently.  HERO is a great platform to learn
            how to take threaded block routines, and modify them into nonblocking tasks.
            
            As a simple example, here are two thread routines...
            foo()
            {
                 while(fooCondition) { doFoo; }
            }
            bar()
            {
                 while(barCondition) { doBar; }
            }
            main()
            {
                 start foo thread;
                 start bar thread;
                 while(true)
                 {
                     do nothing;
                 }
            }
            ...but on a system that may not support or afford threading, a non-threaded example would be...
            foo
            {
                 Process()
                 {
                      if(fooCondition) { doFoo; }
                 }
            }
            bar.Process()
            {
                 Process()
                 {
                      if(barCondition) { doBar; }
                 }
            }
            main()
            {
                 while(true)
                 {
                     foo.Process();
                     bar.Process();
                 }
             }
            
            Marking the class as Processable signals that the class requires a periodic call to Process() in the top-level main loop.
        </member>
        <member name="M:CTRE.Phoenix.Motion.PID.#ctor(CTRE.Phoenix.Signals.IInputSignal)">
            @param inputSig process variable
        </member>
        <member name="M:CTRE.Phoenix.Motion.PID.#ctor(CTRE.Phoenix.Signals.IInputSignal,CTRE.Phoenix.Signals.IInputSignal)">
            @param inputSig process variable
            @param derivativeOfInputSig time derivative of Input sig.
        </member>
        <member name="F:CTRE.Phoenix.Motion.TrajectoryPoint.profileSlotSelect0">
            Which slot to get PIDF gains. PID is used for position servo. F is used
            as the Kv constant for velocity feed-forward. Typically this is hard-coded
            to a particular slot, but you are free to gain schedule if need be.
            Choose from [0,3]
        </member>
        <member name="F:CTRE.Phoenix.Motion.TrajectoryPoint.profileSlotSelect1">
            Which slot to get PIDF gains for auxiliary PId.
            This only has impact during MotionProfileArc Control mode.
            Choose from [0,1].
        </member>
        <member name="F:CTRE.Phoenix.Motion.TrajectoryPoint.isLastPoint">
            Set to true to signal Talon that this is the final point, so do not
            attempt to pop another trajectory point from out of the Talon buffer.
            Instead continue processing this way point. Typically the velocity member
            variable should be zero so that the motor doesn't spin indefinitely.
        </member>
        <member name="F:CTRE.Phoenix.Motion.TrajectoryPoint.zeroPos">
             Set to true to signal Talon to zero the selected sensor. When generating
             MPs, one simple method is to make the first target position zero, and the
             final target position the target distance from the current position. Then
             when you fire the MP, the current position gets set to zero. If this is
             the intent, you can set zeroPos on the first trajectory point.
            
             Otherwise you can leave this false for all points, and offset the
             positions of all trajectory points so they are correct.
        </member>
        <member name="F:CTRE.Phoenix.Motion.TrajectoryPoint.timeDur">
            Duration to apply this trajectory pt.
            This time unit is ADDED to the existing base time set by
            configMotionProfileTrajectoryPeriod().
        </member>
        <member name="T:CTRE.Phoenix.Motion.TrajectoryPoint.TrajectoryDuration">
            Duration to apply to a particular trajectory pt.
            This time unit is ADDED to the existing base time set by
            configMotionProfileTrajectoryPeriod().
        </member>
        <member name="T:CTRE.Phoenix.Motion.MotionProfileStatus">
            Motion Profile Status
            This is simply a data transer object.
        </member>
        <member name="F:CTRE.Phoenix.Motion.MotionProfileStatus.topBufferRem">
             The available empty slots in the trajectory buffer.
            
             The robot API holds a "top buffer" of trajectory points, so your
             applicaion can dump several points at once. The API will then stream them
             into the Talon's low-level buffer, allowing the Talon to act on them.
        </member>
        <member name="F:CTRE.Phoenix.Motion.MotionProfileStatus.topBufferCnt">
            The number of points in the top trajectory buffer.
        </member>
        <member name="F:CTRE.Phoenix.Motion.MotionProfileStatus.btmBufferCnt">
            The number of points in the low level Talon buffer.
        </member>
        <member name="F:CTRE.Phoenix.Motion.MotionProfileStatus.hasUnderrun">
             Set if isUnderrun ever gets set. Only is cleared by
             clearMotionProfileHasUnderrun() to ensure robot logic can react or
             instrument it.
            
             @see com.ctre.phoenix.motorcontrol.can.BaseMotorController#clearMotionProfileHasUnderrun(int)
        </member>
        <member name="F:CTRE.Phoenix.Motion.MotionProfileStatus.isUnderrun">
            This is set if Talon needs to shift a point from its buffer into the
            active trajectory point however the buffer is empty. This gets cleared
            automatically when is resolved.
        </member>
        <member name="F:CTRE.Phoenix.Motion.MotionProfileStatus.activePointValid">
            True if the active trajectory point has not empty, false otherwise. The
            members in activePoint are only valid if this signal is set.
        </member>
        <member name="F:CTRE.Phoenix.Motion.MotionProfileStatus.outputEnable">
            The current output mode of the motion profile executer (disabled,
            enabled, or hold). When changing the set() value in MP mode, it's
            important to check this signal to confirm the change takes effect before
            interacting with the top buffer.
        </member>
        <member name="T:CTRE.Phoenix.MotorControl.IMotorController">
            Generic Motor Controller for all CTRE ESCs (Cyclone and Talon SRX).
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.#ctor(System.Int32,System.Boolean)">
            Constructor for the CANTalon device.
            @param deviceNumber The CAN ID of the Talon SRX
            @param externalEnable pass true to prevent sending enable frames.
             	This can be useful when having one device enable the Talon, and
            		another to control it.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.Set(CTRE.Phoenix.MotorControl.ControlMode,System.Double)">
             Sets the appropriate output on the talon, depending on the mode.
             @param mode The output mode to apply.
             In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
             In Current mode, output value is in amperes.
             In Velocity mode, output value is in position change / 100ms.
             In Position mode, output value is in encoder ticks or an analog value,
               depending on the sensor.
             In Follower mode, the output value is the integer device ID of the talon to
             duplicate.
            
             @param outputValue The setpoint value, as described above.
            
            
            	Standard Driving Example:
            	_talonLeft.set(ControlMode.PercentOutput, leftJoy);
            	_talonRght.set(ControlMode.PercentOutput, rghtJoy);
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.Set(CTRE.Phoenix.MotorControl.ControlMode,System.Double,CTRE.Phoenix.MotorControl.DemandType,System.Double)">
             @param mode Sets the appropriate output on the talon, depending on the mode.
             @param demand0 The output value to apply.
             	such as advanced feed forward and/or auxiliary close-looping in firmware.
             In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
             In Current mode, output value is in amperes.
             In Velocity mode, output value is in position change / 100ms.
             In Position mode, output value is in encoder ticks or an analog value,
               depending on the sensor. See
             In Follower mode, the output value is the integer device ID of the talon to
             duplicate.
            
             @param demand1Type The demand type for demand1.
             Neutral: Ignore demand1 and apply no change to the demand0 output.
             AuxPID: Use demand1 to set the target for the auxiliary PID 1.
             ArbitraryFeedForward: Use demand1 as an arbitrary additive value to the
            	 demand0 output.  In PercentOutput the demand0 output is the motor output,
               and in closed-loop modes the demand0 output is the output of PID0.
             @param demand1 Supplmental output value.  Units match the set mode.
            
            
              Arcade Drive Example:
            		_talonLeft.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, +joyTurn);
            		_talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, -joyTurn);
            
            	Drive Straight Example:
            	Note: Selected Sensor Configuration is necessary for both PID0 and PID1.
            		_talonLeft.follow(_talonRght, FollwerType.AuxOutput1);
            		_talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.AuxPID, desiredRobotHeading);
            
            	Drive Straight to a Distance Example:
            	Note: Other configurations (sensor selection, PID gains, etc.) need to be set.
            		_talonLeft.follow(_talonRght, FollwerType.AuxOutput1);
            		_talonRght.set(ControlMode.MotionMagic, targetDistance, DemandType.AuxPID, desiredRobotHeading);
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.ConfigRemoteFeedbackFilter(System.Int32,CTRE.Phoenix.MotorControl.RemoteSensorSource,System.Int32,System.Int32)">
            	 * Select what remote device and signal to assign to Remote Sensor 0 or Remote Sensor 1.
            	 * After binding a remote device and signal to Remote Sensor X, you may select Remote Sensor X
            	 * as a PID source for closed-loop features.
            	 *
            	 * @param deviceID
             	 *            The CAN ID of the remote sensor device.
            	 * @param remoteSensorSource
            	 *            The remote sensor device and signal type to bind.
            	 * @param remoteOrdinal
            	 *            0 for configuring Remote Sensor 0
            	 *            1 for configuring Remote Sensor 1
            	 * @param timeoutMs
            	 *            Timeout value in ms. If nonzero, function will wait for
            	 *            config success and report an error if it times out.
            	 *            If zero, no blocking or checking is performed.
            	 * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.ConfigSensorTerm(CTRE.Phoenix.MotorControl.SensorTerm,CTRE.Phoenix.MotorControl.FeedbackDevice,System.Int32)">
             Select what sensor term should be bound to switch feedback device.
             Sensor Sum = Sensor Sum Term 0 - Sensor Sum Term 1
             Sensor Difference = Sensor Diff Term 0 - Sensor Diff Term 1
             The four terms are specified with this routine.  Then Sensor Sum/Difference
             can be selected for closed-looping.
            
             @param sensorTerm Which sensor term to bind to a feedback source.
             @param feedbackDevice The sensor signal to attach to sensorTerm.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.ConfigClosedLoopPeakOutput(System.Int32,System.Single,System.Int32)">
             Sets the peak closed-loop output.  This peak output is slot-specific and
               is applied to the output of the associated PID loop.
             This setting is seperate from the generic Peak Output setting.
            
             @param slotIdx
                        Parameter slot for the constant.
             @param percentOut
                        Peak Percent Output from 0 to 1.  This value is absolute and
            						the magnitude will apply in both forward and reverse directions.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.ConfigClosedLoopPeriod(System.Int32,System.Int32,System.Int32)">
             Sets the loop time (in milliseconds) of the PID closed-loop calculations.
             Default value is 1 ms.
            
             @param slotIdx
                        Parameter slot for the constant.
             @param loopTimeMs
                        Loop timing of the closed-loop calculations.  Minimum value of
            						1 ms, maximum of 64 ms.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.ConfigAuxPIDPolarity(System.Boolean,System.Int32)">
             Configures the Polarity of the Auxiliary PID (PID1).
            
             Standard Polarity:
                Primary Output = PID0 + PID1
                Auxiliary Output = PID0 - PID1
            
             Inverted Polarity:
                Primary Output = PID0 - PID1
                Auxiliary Output = PID0 + PID1
            
             @param invert
                        If true, use inverted PID1 output polarity.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for config
                        success and report an error if it times out. If zero, no
                        blocking or checking is performed.
             @return Error Code
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.SelectProfileSlot(System.Int32,System.Int32)">
            SRX has two available slots for PID.
            @param slotIdx one or zero depending on which slot caller wants.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.GetClosedLoopTarget(System.Int32)">
             Gets the current target of a given closed loop.
            
             @param pidIdx
                        0 for Primary closed-loop. 1 for auxiliary closed-loop.
             @return The closed loop target.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.GetActiveTrajectoryPosition">
             Gets the active trajectory target position using
             MotionMagic/MotionProfile control modes.
            
             @return The Active Trajectory Position in sensor units.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.GetActiveTrajectoryVelocity">
             Gets the active trajectory target velocity using
             MotionMagic/MotionProfile control modes.
            
             @return The Active Trajectory Velocity in sensor units per 100ms.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.GetActiveTrajectoryHeading">
             Gets the active trajectory target heading using
             MotionMagicArc/MotionProfileArc control modes.
            
             @return The Active Trajectory Heading in degreees.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.ChangeMotionControlFramePeriod(System.Int32)">
             Calling application can opt to speed up the handshaking between the robot
             API and the controller to increase the download rate of the controller's Motion
             Profile. Ideally the period should be no more than half the period of a
             trajectory point.
            
             @param periodMs
                        The transmit period in ms.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.ConfigMotionProfileTrajectoryPeriod(System.Int32,System.Int32)">
             When trajectory points are processed in the motion profile executer, the MPE determines
             how long to apply the active trajectory point by summing baseTrajDurationMs with the
             timeDur of the trajectory point (see TrajectoryPoint).
            
             This allows general selection of the execution rate of the points with 1ms resolution,
             while allowing some degree of change from point to point.
             @param baseTrajDurationMs The base duration time of every trajectory point.
             							This is summed with the trajectory points unique timeDur.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.Follow(CTRE.Phoenix.MotorControl.IMotorController,CTRE.Phoenix.MotorControl.FollowerType)">
             Set the control mode and output value so that this motor controller will
             follow another motor controller. Currently supports following Victor SPX
             and Talon SRX.
            
             @param masterToFollow
            						Motor Controller object to follow.
             @param followerType
            						Type of following control.  Use AuxOutput1 to follow the master
            						device's auxiliary output 1.
            						Use PercentOutput for standard follower mode.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.Follow(CTRE.Phoenix.MotorControl.IMotorController)">
            Set the control mode and output value so that this motor controller will
            follow another motor controller. Currently supports following Victor SPX
            and Talon SRX.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.BaseMotorController.GetSensorCollection">
            @return object that can get/set individual raw sensor values.
        </member>
        <member name="T:CTRE.Phoenix.MotorControl.DemandType">
            How to interpret a demand value.
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.DemandType.Neutral">
            Ignore the demand value and apply neutral/no-change.
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.DemandType.AuxPID">
             When closed-looping, set the target of the aux PID loop to the demand value.
            
             When following, follow the processed output of the combined 
             primary/aux PID output.  The demand value is ignored.
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.DemandType.ArbitraryFeedForward">
            When closed-looping, add this arbitrarily to the closed-loop output.
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.NeutralMode.EEPROMSetting">
            Use the NeutralMode that is set by the jumper wire on the CAN device 
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.NeutralMode.Coast">
            Do not attempt to stop the motor. Instead allow it to coast to a stop
                       without applying resistance. 
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.NeutralMode.Brake">
            Stop the motor's rotation by applying a force. 
        </member>
        <member name="T:CTRE.Phoenix.MotorControl.IMotorControllerEnhanced">
            Advanced Motor Controller for CTRE ESCs with advanced features (Talon SRX with 2018 firmware).
        </member>
        <member name="P:CTRE.Phoenix.MotorControl.IMotorControllerEnhanced.SensorCollection">
            @retrieve object that can get/set individual RAW sensor values.
        </member>
        <member name="T:CTRE.Phoenix.MotorControl.ControlMode">
             Common Control Modes for all CTRE Motor Controllers.
            
        </member>
        <member name="T:CTRE.Phoenix.MotorControl.FeedbackDevice">
            Motor controller with gadgeteer connector.
        </member>
        <member name="T:CTRE.Phoenix.MotorControl.RemoteFeedbackDevice">
            All Motor controllers can select remote signals over CAN Bus (Talon SRX and Cyclone)
        </member>
        <member name="T:CTRE.Phoenix.MotorControl.SensorCollection">
            Implements the sensorcollection class. 
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.SensorCollection._ll">
            Low level object. 
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.#ctor(CTRE.Phoenix.LowLevel.MotController_LowLevel)">
             Constructor.
            
             @param   ll  The ll.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetAnalogIn(System.Int32@)">
             Get the position of whatever is in the analog pin of the Talon, regardless of
               whether it is actually being used for feedback.
            
             @param [out] param   The parameter to fill.
            
             @return  the 24bit analog value.  The bottom ten bits is the ADC (0 - 1023)
                      on the analog pin of the Talon. The upper 14 bits tracks the overflows and underflows
                      (continuous sensor).
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.SetAnalogPosition(System.Int32,System.Int32)">
             Sets analog position.
            
             @param   newPosition The new position.
             @param   timeoutMs   (Optional) The timeout in milliseconds.
            
             @return  an ErrorCode.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetAnalogInRaw(System.Int32@)">
             Get the position of whatever is in the analog pin of the Talon, regardless of whether
               it is actually being used for feedback.
            
             @param [out] param   The parameter to fill.
            
             @return  the ADC (0 - 1023) on analog pin of the Talon.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetAnalogInVel(System.Int32@)">
             Get the position of whatever is in the analog pin of the Talon, regardless of
               whether it is actually being used for feedback.
            
             @param [out] param   The parameter to fill.
            
             @return  the value (0 - 1023) on the analog pin of the Talon.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetQuadraturePosition(System.Int32@)">
             Get the position of whatever is in the analog pin of the Talon, regardless of whether
               it is actually being used for feedback.
            
             @param [out] param   The value to fill with the Quad pos.
            
             @return  the Error code of the request.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.SetQuadraturePosition(System.Int32,System.Int32)">
             Change the quadrature reported position.  Typically this is used to "zero" the
               sensor. This only works with Quadrature sensor.  To set the selected sensor position
               regardless of what type it is, see SetSelectedSensorPosition in the motor controller class.
            
             @param   newPosition The position value to apply to the sensor.
             @param   timeoutMs   (Optional) How long to wait for confirmation.  Pass zero so that call
                                  does not block.
            
             @return  error code.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetQuadratureVelocity(System.Int32@)">
             Get the position of whatever is in the analog pin of the Talon, regardless of whether
               it is actually being used for feedback.
            
             @param [out] param   The parameter to fill.
            
             @return  the value (0 - 1023) on the analog pin of the Talon.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetPulseWidthPosition(System.Int32@)">
             Gets pulse width position.
            
             @param [out] param   The parameter to fill.
            
             @return  the pulse width position.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.SetPulseWidthPosition(System.Int32,System.Int32)">
             Sets pulse width position.
            
             @param   newPosition The position value to apply to the sensor.
             @param   timeoutMs   (Optional) How long to wait for confirmation.  Pass zero so that call
                                  does not block.
            
             @return  an ErrorCode.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetPulseWidthVelocity(System.Int32@)">
             Gets pulse width velocity.
            
             @param [out] param   The parameter to fill.
            
             @return  the pulse width velocity.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetPulseWidthRiseToFallUs(System.Int32@)">
             Gets pulse width rise to fall us.
            
             @param [out] param   The parameter to fill.
            
             @return  the pulse width rise to fall us.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetPulseWidthRiseToRiseUs(System.Int32@)">
             Gets pulse width rise to rise us.
            
             @param [out] param   The parameter to fill.
            
             @return  the pulse width rise to rise us.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetPinStateQuadA(System.Int32@)">
             Gets pin state quad a.
            
             @param [out] param   The parameter to fill.
            
             @return  the pin state quad a.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetPinStateQuadB(System.Int32@)">
             Gets pin state quad b.
            
             @param [out] param   The parameter to fill.
            
             @return  Digital level of QUADB pin.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.GetPinStateQuadIdx(System.Int32@)">
             Gets pin state quad index.
            
             @param [out] param   The parameter to fill.
            
             @return  Digital level of QUAD Index pin.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.IsFwdLimitSwitchClosed(System.Int32@)">
             Is forward limit switch closed.
            
             @param [out] param   The parameter to fill.
            
             @return  '1' iff forward limit switch is closed, 0 iff switch is open. This function works
                      regardless if limit switch feature is enabled.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.SensorCollection.IsRevLimitSwitchClosed(System.Int32@)">
             Is reverse limit switch closed.
            
             @param [out] param   The parameter to fill.
            
             @return  '1' iff reverse limit switch is closed, 0 iff switch is open. This function works
                      regardless if limit switch feature is enabled.
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.StatusFrameEnhanced.Status_10_MotionMagic">
            Old name for Status 10 Frame.
            Use Status_10_Targets instead.
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.StatusFrameEnhanced.Status_10_Targets">
            Correct name for Status 10 Frame.
            Functionally equivalent to Status_10_MotionMagic
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.StatusFrame.Status_10_MotionMagic_">
            Old name for Status 10 Frame.
            Use Status_10_Targets instead.
        </member>
        <member name="F:CTRE.Phoenix.MotorControl.StatusFrame.Status_10_Targets_">
            Correct name for Status 10 Frame.
            Functionally equivalent to Status_10_MotionMagic
        </member>
        <member name="T:CTRE.Phoenix.Sensors.PigeonIMU">
            Pigeon IMU Class.
            Class supports communicating over CANbus and over ribbon-cable (CAN Talon SRX).
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.#ctor(System.Int32)">
             Create a Pigeon object that communicates with Pigeon on CAN Bus.
            
             @param deviceNumber
                        CAN Device Id of Pigeon [0,62]
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.#ctor(CTRE.Phoenix.MotorControl.CAN.TalonSRX)">
             Create a Pigeon object that communciates with Pigeon through the
             Gadgeteer ribbon cable connected to a Talon on CAN Bus.
            
             @param talonSrx
                        Object for the TalonSRX connected via ribbon cable.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetYaw(System.Single,System.Int32)">
            	 * Sets the Yaw register to the specified value.
            	 *
            	 * @param angleDeg  Degree of Yaw [+/- 23040 degrees]
            	 * @param timeoutMs
               *            Timeout value in ms. If nonzero, function will wait for
               *            config success and report an error if it times out.
               *            If zero, no blocking or checking is performed.
            	 * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.AddYaw(System.Single,System.Int32)">
                             * Atomically add to the Yaw register.
                             *
                             * @param angleDeg  Degrees to add to the Yaw register.
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetYawToCompass(System.Int32)">
                             * Sets the Yaw register to match the current compass value.
                             *
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetFusedHeading(System.Single,System.Int32)">
            	 * Sets the Fused Heading to the specified value.
            	 *
            	 * @param angleDeg  Degree of heading [+/- 23040 degrees]
            	 * @param timeoutMs
               *            Timeout value in ms. If nonzero, function will wait for
               *            config success and report an error if it times out.
               *            If zero, no blocking or checking is performed.
            	 * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.AddFusedHeading(System.Single,System.Int32)">
                             * Atomically add to the Fused Heading register.
                             *
                             * @param angleDeg  Degrees to add to the Fused Heading register.
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetFusedHeadingToCompass(System.Int32)">
                             * Sets the Fused Heading register to match the current compass value.
                             *
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetAccumZAngle(System.Single,System.Int32)">
                             * Sets the AccumZAngle.
                             *
                             * @param angleDeg  Degrees to set AccumZAngle to.
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ConfigTemperatureCompensationEnable(System.Boolean,System.Int32)">
                             * Enable/Disable Temp compensation. Pigeon defaults with this on at boot.
                             *
                             * @param bTempCompEnable Set to "True" to enable temperature compensation.
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetCompassDeclination(System.Single,System.Int32)">
                             * Set the declination for compass. Declination is the difference between
                             * Earth Magnetic north, and the geographic "True North".
                             *
                             * @param angleDegOffset  Degrees to set Compass Declination to.
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetCompassAngle(System.Single,System.Int32)">
                             * Sets the compass angle. Although compass is absolute [0,360) degrees, the
                             * continuous compass register holds the wrap-arounds.
                             *
                             * @param angleDeg  Degrees to set continuous compass angle to.
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.EnterCalibrationMode(CTRE.Phoenix.Sensors.CalibrationMode,System.Int32)">
                             * Enters the Calbration mode.  See the Pigeon IMU documentation for More
                             * information on Calibration.
                             *
                             * @param calMode  Calibration to execute
                             * @param timeoutMs
                           *            Timeout value in ms. If nonzero, function will wait for
                           *            config success and report an error if it times out.
                           *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetGeneralStatus(CTRE.Phoenix.Sensors.GeneralStatus)">
             Get the status of the current (or previousley complete) calibration.
            
             @param toFill Container for the status information.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetLastError">
             Call GetLastError() generated by this object.
             Not all functions return an error code but can
             potentially report errors.
            
             This function can be used to retrieve those error codes.
            
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.Get6dQuaternion(System.Single[])">
             Get 6d Quaternion data.
            
             @param wxyz Array to fill with quaternion data w[0], x[1], y[2], z[3]
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetYawPitchRoll(System.Single[])">
             Get Yaw, Pitch, and Roll data.
            
             @param ypr_deg Array to fill with yaw[0], pitch[1], and roll[2] data
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetAccumGyro(System.Single[])">
             Get AccumGyro data.
             AccumGyro is the integrated gyro value on each axis.
            
             @param xyz_deg Array to fill with x[0], y[1], and z[2] AccumGyro data
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetAbsoluteCompassHeading">
            Get the absolute compass heading.
            @return compass heading [0,360) degrees.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetCompassHeading">
            Get the continuous compass heading.
            @return continuous compass heading [-23040, 23040) degrees. Use
                    SetCompassHeading to modify the wrap-around portion.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetCompassFieldStrength">
            Gets the compass' measured magnetic field strength.
            @return field strength in Microteslas (uT).
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetTemp">
             Gets the temperature of the pigeon.
            
             @return Temperature in ('C)
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetState">
             Gets the current Pigeon state
            
             @return PigeonState enum
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetUpTime">
             Gets the current Pigeon uptime.
            
             @return How long has Pigeon been running in whole seconds. Value caps at
                     255.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetRawMagnetometer(System.Int16[])">
             Get Raw Magnetometer data.
            
             @param rm_xyz Array to fill with x[0], y[1], and z[2] data
             				Number is equal to 0.6 microTeslas per unit.
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetBiasedMagnetometer(System.Int16[])">
             Get Biased Magnetometer data.
            
             @param bm_xyz Array to fill with x[0], y[1], and z[2] data
             				Number is equal to 0.6 microTeslas per unit.
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetBiasedAccelerometer(System.Int16[])">
             Get Biased Accelerometer data.
            
             @param ba_xyz Array to fill with x[0], y[1], and z[2] data.
             			These are in fixed point notation Q2.14.  eg. 16384 = 1G
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetRawGyro(System.Single[])">
             Get Raw Gyro data.
            
             @param xyz_dps Array to fill with x[0], y[1], and z[2] data in degrees per second.
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetAccelerometerAngles(System.Single[])">
             Get Accelerometer tilt angles.
            
             @param tiltAngles Array to fill with x[0], y[1], and z[2] angles in degrees.
             @return The last ErrorCode generated.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetFusedHeading(CTRE.Phoenix.Sensors.FusionStatus)">
             Get the current Fusion Status (including fused heading)
            
             @param toFill 	object reference to fill with fusion status flags.
            					Caller may pass null if flags are not needed.
             @return The fused heading in degrees.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetFusedHeading">
             Gets the Fused Heading
            
             @return The fused heading in degrees.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetFirmwareVersion">
             Gets the firmware version of the device.
            
             @return param holds the firmware version of the device. Device must be powered
             cycled at least once.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.HasResetOccurred">
            @return true iff a reset has occurred since last call.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ConfigSetCustomParam(System.Int32,System.Int32,System.Int32)">
                             * Sets the value of a custom parameter. This is for arbitrary use.
                           *
                           * Sometimes it is necessary to save calibration/declination/offset
                           * information in the device. Particularly if the
                           * device is part of a subsystem that can be replaced.
                             *
                             * @param newValue
                             *            Value for custom parameter.
                             * @param paramIndex
                             *            Index of custom parameter. [0-1]
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ConfigGetCustomParam(System.Int32,System.Int32)">
                             * Gets the value of a custom parameter. This is for arbitrary use.
                           *
                           * Sometimes it is necessary to save calibration/declination/offset
                           * information in the device. Particularly if the
                           * device is part of a subsystem that can be replaced.
                             *
                             * @param paramIndex
                             *            Index of custom parameter. [0-1]
                             * @param timoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Value of the custom param.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ConfigSetParameter(CTRE.Phoenix.LowLevel.ParamEnum,System.Single,System.Int32,System.Int32,System.Int32)">
                             * Sets a parameter. Generally this is not used.
                           * This can be utilized in
                           * - Using new features without updating API installation.
                           * - Errata workarounds to circumvent API implementation.
                           * - Allows for rapid testing / unit testing of firmware.
                             *
                             * @param param
                             *            Parameter enumeration.
                             * @param value
                             *            Value of parameter.
                             * @param subValue
                             *            Subvalue for parameter. Maximum value of 255.
                             * @param ordinal
                             *            Ordinal of parameter.
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ConfigSetParameter(System.Int32,System.Single,System.Int32,System.Int32,System.Int32)">
                             * Sets a parameter. Generally this is not used.
                           * This can be utilized in
                           * - Using new features without updating API installation.
                           * - Errata workarounds to circumvent API implementation.
                           * - Allows for rapid testing / unit testing of firmware.
                             *
                             * @param param
                             *            Parameter enumeration.
                             * @param value
                             *            Value of parameter.
                             * @param subValue
                             *            Subvalue for parameter. Maximum value of 255.
                             * @param ordinal
                             *            Ordinal of parameter.
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ConfigGetParameter(CTRE.Phoenix.LowLevel.ParamEnum,System.Int32,System.Int32)">
                             * Gets a parameter. Generally this is not used.
                           * This can be utilized in
                           * - Using new features without updating API installation.
                           * - Errata workarounds to circumvent API implementation.
                           * - Allows for rapid testing / unit testing of firmware.
                             *
                             * @param param
                             *            Parameter enumeration.
                             * @param ordinal
                             *            Ordinal of parameter.
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Value of parameter.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ConfigGetParameter(System.Int32,System.Int32,System.Int32)">
                             * Gets a parameter.
                             *
                             * @param param
                             *            Parameter enumeration.
                             * @param ordinal
                             *            Ordinal of parameter.
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Value of parameter.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetStatusFramePeriod(CTRE.Phoenix.Sensors.PigeonIMU_StatusFrame,System.Int32,System.Int32)">
                             * Sets the period of the given status frame.
                             *
                             * @param statusFrame
                             *            Frame whose period is to be changed.
                             * @param periodMs
                             *            Period in ms for the given frame.
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetStatusFramePeriod(System.Int32,System.Int32,System.Int32)">
                             * Sets the period of the given status frame.
                             *
                             * @param statusFrame
                             *            Frame whose period is to be changed.
                             * @param periodMs
                             *            Period in ms for the given frame.
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetStatusFramePeriod(CTRE.Phoenix.Sensors.PigeonIMU_StatusFrame,System.Int32)">
                             * Gets the period of the given status frame.
                             *
                             * @param frame
                             *            Frame to get the period of.
                             * @param timeoutMs
                         *            Timeout value in ms. If nonzero, function will wait for
                         *            config success and report an error if it times out.
                         *            If zero, no blocking or checking is performed.
                             * @return Period of the given status frame.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetControlFramePeriod(CTRE.Phoenix.Sensors.PigeonIMU_ControlFrame,System.Int32)">
             Sets the period of the given control frame.
            
             @param frame
                        Frame whose period is to be changed.
             @param periodMs
                        Period in ms for the given frame.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetControlFramePeriod(System.Int32,System.Int32)">
             Sets the period of the given control frame.
            
             @param frame
                        Frame whose period is to be changed.
             @param periodMs
                        Period in ms for the given frame.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.SetFaults(CTRE.Phoenix.Sensors.PigeonIMU_Faults)">
             Gets the fault status
            
             @param toFill
                        Container for fault statuses.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetStickyFaults(CTRE.Phoenix.Sensors.PigeonIMU_StickyFaults)">
             Gets the sticky fault status
            
             @param toFill
                        Container for sticky fault statuses.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.ClearStickyFaults(System.Int32)">
             Clears the Sticky Faults
            
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.Sensors.PigeonIMU.GetDeviceID">
            @return The Device Number
        </member>
        <member name="T:CTRE.Phoenix.Sensors.CalibrationMode">
            Various calibration modes supported by Pigeon. 
        </member>
        <member name="T:CTRE.Phoenix.Sensors.PigeonState">
            Overall state of the Pigeon. 
        </member>
        <member name="T:CTRE.Phoenix.Sensors.GeneralStatus">
             Data object for status on current calibration and general status.
            
             Pigeon has many calibration modes supported for a variety of uses. The
             modes generally collects and saves persistently information that makes
             the Pigeon signals more accurate. This includes collecting temperature,
             gyro, accelerometer, and compass information.
            
             For FRC use-cases, typically compass and temperature calibration is not
             required.
            
             Additionally when motion driver software in the Pigeon boots, it will
             perform a fast boot calibration to initially bias gyro and setup
             accelerometer.
            
             These modes can be enabled with the EnterCalibration mode.
            
             When a calibration mode is entered, caller can expect...
            
             - PigeonState to reset to Initializing and bCalIsBooting is set to true.
             Pigeon LEDs will blink the boot pattern. This is similar to the normal
             boot cal, however it can an additional ~30 seconds since calibration
             generally requires more information. currentMode will reflect the user's
             selected calibration mode.
            
             - PigeonState will eventually settle to UserCalibration and Pigeon LEDs
             will show cal specific blink patterns. bCalIsBooting is now false.
            
             - Follow the instructions in the Pigeon User Manual to meet the
             calibration specific requirements. When finished calibrationError will
             update with the result. Pigeon will solid-fill LEDs with red (for
             failure) or green (for success) for ~5 seconds. Pigeon then perform
             boot-cal to cleanly apply the newly saved calibration data.
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.state">
            The current state of the motion driver. This reflects if the sensor
            signals are accurate. Most calibration modes will force Pigeon to
            reinit the motion driver.
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.currentMode">
            The currently applied calibration mode if state is in UserCalibration
            or if bCalIsBooting is true. Otherwise it holds the last selected
            calibration mode (when calibrationError was updated).
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.calibrationError">
            The error code for the last calibration mode. Zero represents a
            successful cal (with solid green LEDs at end of cal) and nonzero is a
            failed calibration (with solid red LEDs at end of cal). Different
            calibration
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.bCalIsBooting">
            After caller requests a calibration mode, pigeon will perform a
            boot-cal before entering the requested mode. During this period, this
            flag is set to true.
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.tempC">
            Temperature in Celsius
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.upTimeSec">
            Number of seconds Pigeon has been up (since boot). This register is
            reset on power boot or processor reset. Register is capped at 255
            seconds with no wrap around.
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.noMotionBiasCount">
            Number of times the Pigeon has automatically rebiased the gyro. This
            counter overflows from 15 -> 0 with no cap.
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.tempCompensationCount">
            Number of times the Pigeon has temperature compensated the various
            signals. This counter overflows from 15 -> 0 with no cap.
        </member>
        <member name="F:CTRE.Phoenix.Sensors.GeneralStatus.lastError">
            Same as getLastError()
        </member>
        <member name="M:CTRE.Phoenix.Sensors.GeneralStatus.ToString">
            general string description of current status
        </member>
        <member name="T:CTRE.Phoenix.Sensors.FusionStatus">
            Data object for holding fusion information. 
        </member>
        <member name="F:CTRE.Phoenix.Sensors.FusionStatus.lastError">
            Same as getLastError()
        </member>
        <member name="T:CTRE.Phoenix.Sensors.PigeonIMU_ControlFrame">
            Enumerated type for status frame types. 
        </member>
        <member name="T:CTRE.Phoenix.Sensors.PigeonIMU_StatusFrame">
            Enumerated type for status frame types. 
        </member>
        <member name="T:CTRE.Phoenix.Signals.DebouncedBool">
            
        </member>
        <member name="M:CTRE.Phoenix.Tasking.StateMachine.ProcessState(System.Enum,System.Int32)">
            Child class implements this 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Pixy_FRAME_START_WORD">
            Sync Frame 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Pixy_FRAME_WRONG_ORDER">
            Out of order Frame 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Pixy_FRAME_START_WORD_CC">
            ColorCode Block Sync Frame 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Pixy_SYNC_BYTE">
            Data Sync Byte 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Pixy_SYNC_BYTE_DATA">
            Data Send/Sync Byte 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.OutBuffer">
            Circular Queue for Collecting Data 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.IsColorCoded">
            Tracks if we have gotten a color coded block 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Bytes">
            String for Pixy 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera._Blocks">
            Holds the collected blocks, each element is a block 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Word">
            Variable for holding words from MISO 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Sum">
            Used to compare to checksum for data validity 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Checksum">
            Checksum grabbed form second word of block 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera._BlockCount">
            How many blocks are avaiable for grab 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Block">
            Block that we store all our BlockData 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.TempCS">
            Temporary Chip Select for debugging 
        </member>
        <member name="F:CTRE.ThirdParty.PixyCamera.Start">
            Intiate value for tracking time 
        </member>
        <member name="M:CTRE.ThirdParty.PixyCamera.#ctor(CTRE.Gadgeteer.IPortSPI,System.UInt16)">
            PixyCam Constructor
            
            Also Initializes OutputBuffer and Sets PixyState to FirstWord
            
            @param   PortDef     Port PixyCam is plugged into
            @param   ClockRate   Clockrate of SPI
        </member>
        <member name="M:CTRE.ThirdParty.PixyCamera.GetByte(System.Byte)">
            Single byte read and Write
            
            @param   DataInTheOutQueue   Data to be sent when Reading/Writing
            @return  Buffer[0]           Returns a single byte of data (part of word)
        </member>
        <member name="M:CTRE.ThirdParty.PixyCamera.GetWord">
            Single Word Read
            
            @return Word  2 Bytes of data combined for a single word
        </member>
        <member name="M:CTRE.ThirdParty.PixyCamera.Send(System.Byte[])">
            Queues data to be sent when GetWord() is called
            
            @param   data    Byte of data to send on MOSI
            @return  Length  if there is anything send or if there is any data available to send
        </member>
        <member name="M:CTRE.ThirdParty.PixyCamera.GetBlock(CTRE.ThirdParty.PixyBlock)">
            Grabs a PixyBlock
            
            @param   blockToFill     Block to fill good with
            @return  bool            If Block data is available or not
        </member>
        <member name="M:CTRE.ThirdParty.PixyCamera.Process">
            Processing that searches for the beginning of the frame and syncs up to grab data
        </member>
        <member name="P:CTRE.ThirdParty.PixyCamera.Status">
            Getter that returns status values as well as tells us time since last block and send CAN Frames for debugging
        </member>
        <member name="P:CTRE.ThirdParty.PixyCamera.BlockCount">
            Grabs the number of blocks
            
            @return  _Blocks.Count   Number of blocks available 
        </member>
        <member name="T:CTRE.ThirdParty.PixyCamera.States">
            States for Pixy processing 
        </member>
        <member name="T:CTRE.ThirdParty.PixyCamera.PixyStatus">
            Initate Status values and creates a string to print upon request
        </member>
        <member name="T:CTRE.ThirdParty.PixyBlock">
            Getter for grabbing block data generated from processing and generates a string upon request
        </member>
        <member name="M:CTRE.Phoenix.Reporting.ConsolePrint(System.String)">
            Prints to Visual Studio console.
            @param message 
                             Message to print.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.#ctor(System.Int32)">
            Constructor for the PneumaticControlModule device.
            @param deviceNumber The CAN ID of the PCM
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.HandleErr(System.Int32)">
            report any comm/CAN errors if any occur 
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.StartCompressor">
            Start the compressor running in closed loop control mode Use the method in
            cases where you would like to manually stop and start the compressor for
            applications such as conserving battery or making sure that the compressor
            motor doesn't start during critical operations.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.StopCompressor">
            Stop the compressor from running in closed loop control mode. Use the
            method in cases where you would like to manually stop and start the
            compressor for applications such as conserving battery or making sure that
            the compressor motor doesn't start during critical operations.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetPressureSwitchValue">
            Get the current pressure switch value
            @return true if the pressure is low by reading the pressure switch that is
                    plugged into the PCM
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetCompressorCurrent">
            Get the current being used by the compressor
            @return current consumed in amps for the compressor motor
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetCompressorCurrentTooHighFault">
            @return true if PCM is in fault state : Compressor Drive is disabled due to
            compressor current being too high.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetCompressorCurrentTooHighStickyFault">
            @return true if PCM sticky fault is set : Compressor Drive is disabled due
                    to compressor current being too high.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetCompressorShortedStickyFault">
            @return true if PCM sticky fault is set : Compressor output appears to be
                    shorted.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetCompressorShortedFault">
            @return true if PCM is in fault state : Compressor output appears to be
                    shorted.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetCompressorNotConnectedStickyFault">
            @return true if PCM sticky fault is set : Compressor does not appear to be
                    wired, i.e. compressor is not drawing enough current.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetCompressorNotConnectedFault">
            @return true if PCM is in fault state : Compressor does not appear to be
                    wired, i.e. compressor is not drawing enough current.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.ClearAllPCMStickyFaults">
             Clear ALL sticky faults inside PCM that Compressor is wired to.
            
             If a sticky fault is set, then it will be persistently cleared. Compressor
             drive maybe momentarily disable while flags are being cleared. Care should
             be taken to not call this too frequently, otherwise normal compressor
             functionality may be prevented.
            
             If no sticky faults are set then this call will have no effect.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.IsSolenoidBlackListed(System.Int32)">
             Check if solenoid is blacklisted. If a solenoid is shorted, it is added to
             the blacklist and disabled until power cycle, or until faults are cleared.
            
             @see #ClearAllPCMStickyFaults()
            
             @return If solenoid is disabled due to short.
        </member>
        <member name="M:CTRE.Phoenix.PneumaticControlModule.GetLowLevelObject">
            @return low level object for advanced control.
        </member>
        <member name="T:CTRE.Phoenix.PowerDistributionPanel">
            Class object representing a CTRE Power Distribution Panel on CAN Bus.
            Construct an instance with the appropriate Device ID.
        </member>
        <member name="F:CTRE.Phoenix.PowerDistributionPanel.STATUS_1">
            CAN frame defines 
        </member>
        <member name="M:CTRE.Phoenix.PowerDistributionPanel.#ctor(System.UInt32)">
            Create a PDP object that communicates on CAN Bus.
            @param deviceNumber [0,62] Device ID of PDP.
        </member>
        <member name="M:CTRE.Phoenix.PowerDistributionPanel.GetChannelCurrent(System.Int32)">
            Get current for a given channel in amperes. 
            @param channelId [0,15] channel to retrieve current.
            @return current in amperes.
            @see GetLastError to retrieve error information.
        </member>
        <member name="M:CTRE.Phoenix.PowerDistributionPanel.GetLastError">
            @return error code from last API call.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.TalonSRX.SetStatusFramePeriod(CTRE.Phoenix.MotorControl.StatusFrameEnhanced,System.Int32,System.Int32)">
             Sets the period of the given status frame.
            
             User ensure CAN Bus utilization is not high.
            
             This setting is not persistent and is lost when device is reset.
             If this is a concern, calling application can use HasReset()
             to determine if the status frame needs to be reconfigured.
            
             @param frame
                        Frame whose period is to be changed.
             @param periodMs
                        Period in ms for the given frame.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.TalonSRX.GetStatusFramePeriod(CTRE.Phoenix.MotorControl.StatusFrameEnhanced,System.Int32)">
             Gets the period of the given status frame.
            
             @param frame
                        Frame to get the period of.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Period of the given status frame.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.TalonSRX.ConfigForwardLimitSwitchSource(CTRE.Phoenix.MotorControl.LimitSwitchSource,CTRE.Phoenix.MotorControl.LimitSwitchNormal,System.Int32)">
             Configures a limit switch for a local/remote source.
            
             For example, a CAN motor controller may need to monitor the Limit-R pin
             of another Talon, CANifier, or local Gadgeteer feedback connector.
            
             If the sensor is remote, a device ID of zero is assumed.
             If that's not desired, use the four parameter version of this function.
            
             @param type
                        Limit switch source.
                        User can choose between the feedback connector, remote Talon SRX, CANifier, or deactivate the feature.
             @param normalOpenOrClose
                        Setting for normally open, normally closed, or disabled. This setting
                        matches the web-based configuration drop down.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.MotorControl.CAN.TalonSRX.ConfigReverseLimitSwitchSource(CTRE.Phoenix.MotorControl.LimitSwitchSource,CTRE.Phoenix.MotorControl.LimitSwitchNormal,System.Int32)">
             Configures a limit switch for a local/remote source.
            
             For example, a CAN motor controller may need to monitor the Limit-R pin
             of another Talon, CANifier, or local Gadgeteer feedback connector.
            
             If the sensor is remote, a device ID of zero is assumed. If that's not
             desired, use the four parameter version of this function.
            
             @param type
                        Limit switch source. @see #LimitSwitchSource User can choose
                        between the feedback connector, remote Talon SRX, CANifier, or
                        deactivate the feature.
             @param normalOpenOrClose
                        Setting for normally open, normally closed, or disabled. This
                        setting matches the web-based configuration drop down.
             @param timeoutMs
                        Timeout value in ms. If nonzero, function will wait for config
                        success and report an error if it times out. If zero, no
                        blocking or checking is performed.
             @return Error Code generated by function. 0 indicates no error.
        </member>
        <member name="M:CTRE.Phoenix.SafeOutputPort.Write(System.Boolean)">
            Attempt to update logic output (enable output if pin is high-Z).
        </member>
        <member name="F:CTRE.Phoenix.UsbHostDevice._maskBits">
            Mask bits for selecting with USB peripherals to allow
            on the host device port.
            BIT0 => HID devices (0 to enable).
            BIT1 => Selectable HID devices with switch set to 'D' (0 to enable).
            BIT2 => Selectable HID devices with switch set to 'X' (1 to enable).
            BIT3 => XInput/XBOX 360 Controllers. (0 to enable).
        </member>
        <member name="M:CTRE.Phoenix.UsbHostDevice.SelectMode(CTRE.Phoenix.UsbHostDevice.UsbHostDeviceMode)">
            keep private until we decide otherwise 
        </member>
        <member name="M:CTRE.Phoenix.UsbHostDevice.GetSelectedMode">
            keep private until we decide otherwise 
        </member>
        <member name="M:CTRE.Phoenix.UsbHostDevice.SyncGet(CTRE.Phoenix.Controller.GameControllerValues@,System.UInt32)">
                     * Interface for anything that provides gamepad/joystick values (could be from a host pc or from USB attached gamepad). 
                     * @return  Negative If values could not be retrieved due to connection issue.  toFill is cleared.
                                Zero if values are stale (no new data). toFill is left untouched.
                     *          Positive if values are updated. toFill is filled in.
        </member>
        <member name="T:CTRE.Phoenix.UsbHostDevice.UsbHostDeviceMode">
            keep private until we decide otherwise 
        </member>
        <member name="M:CTRE.Phoenix.Util.Abs(System.Single)">
            Returns the absolute value 
        </member>
        <member name="M:CTRE.Phoenix.Util.Bound(System.Single,System.Single)">
            Bounds value within the cap of 1 
        </member>
        <member name="M:CTRE.Phoenix.Util.Deadband(System.Single@,System.Single)">
            If value is within 10%, clear it 
        </member>
        <member name="M:CTRE.Phoenix.Util.IsWithin(System.Single,System.Single,System.Single)">
            Not 100% sure what this is used for 
        </member>
        <member name="M:CTRE.Phoenix.Util.SmallerOf(System.Int32,System.Int32)">
            Returns the smaller value of the two inputted 
        </member>
        <member name="M:CTRE.Phoenix.Watchdog.Feed">
            Allow motor control for another 100ms.
            Call this periodically to keep actuators enabled.
        </member>
    </members>
</doc>
